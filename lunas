#!/usr/bin/env lua

-- prologue

if #arg ~= 2 then
	io.write "Usage: lunas [file] [out]\n"
	os.exit(-1)
end

-- constants

---@enum Opcode
local Opcodes = {
	BRK = 0x00, INC = 0x01, POP = 0x02, NIP = 0x03, SWP = 0x04, ROT = 0x05, DUP = 0x06, OVR = 0x07,
	EQU = 0x08, NEQ = 0x09, GTH = 0x0a, LTH = 0x0b, JMP = 0x0c, JCN = 0x0d, JSR = 0x0e, STH = 0x0f,
	LDZ = 0x10, STZ = 0x11, LDR = 0x12, STR = 0x13, LDA = 0x14, STA = 0x15, DEI = 0x16, DEO = 0x17,
	ADD = 0x18, SUB = 0x19, MUL = 0x1a, DIV = 0x1b, AND = 0x1c, ORA = 0x1d, EOR = 0x1e, SFT = 0x1f,
	JCI = 0x20, JMI = 0x40, JSI = 0x60, LIT = 0x80,
}

---@enum ModeFlag
local ModeFlags = {
	SHORT = 1 << 5,
	RETURN = 1 << 6,
	KEEP = 1 << 7,
}

-- may use later
-- percents are for pattern matching purposes
---@diagnostic disable-next-line: unused-local
local reservedChars = "|%$@&,_%.%-;=!%?#\"%%~%[%]"

-- parsing helpers

---@param s string
---@param i integer
---@return string
local function charAt(s, i) return s:sub(i,i) end

---@param s string
---@return string
local function unescape(s)
	local ret = ""
	for i=1, #s do
		local c = charAt(s,i)
		if c == '\n' then ret = ret .. '\\n'
		elseif c == '\t' then ret = ret .. '\\t'
		elseif c == '\r' then ret = ret .. '\\r'
		else ret = ret .. c end
	end
	return ret
end

---@param hi integer?
---@param lo integer?
---@return integer
local function joinBytes(hi, lo)
	if not (lo or hi) then return 0 end
	---@cast hi integer
	if not lo then return hi end
	return ((hi & 0xff) << 8) | (lo & 0xff)
end

---@alias Label table{ name: string, refersTo: integer, timesUsed: integer, mainLabel: Label? }

---@class Program
---@field public  source        string?
---@field private pos           integer
---@field private line          integer
---@field private char          integer
---@field private startl        integer
---@field private startc        integer
---@field private curChar       string
---@field public  code          integer[]
---@field private memPos        integer
---@field public  labels        table[ [string]: Label ]
---@field public  macros        table[ [string]: table ]
---@field private macroMode     boolean
---@field private lastMainLabel Label?
---@field public  hadError      boolean
local Program = {}
Program.__index = Program

---@param source string
---@return Program
function Program.new(source)
	return setmetatable({}, Program):restart(source)
end

---Discards all progress and restarts the assembler.
---@param source string?
---@return Program self
function Program:restart(source)
	self.source = source
	self.code = {}
	self.labels = {}
	self.macros = {}
	self.state = {}
	self.macroMode = false
	self:rewind()
	return self
end

---@return string
---@private
function Program:advance()
	local oldChar = self.curChar
	if not self:atEnd() then
		self.pos = self.pos + 1
		self.char = self.char + 1
		self.curChar = self.source:sub(self.pos, self.pos)
		if self.curChar == '\n' then
			self.line = self.line + 1
			self.char = 1
		end
	end
	return oldChar
end

---@param c char
---@private
function Program:consume(c)
	if self.curChar ~= c then
		self:error("Expected '"..c.."', got '"..self.curChar.."'")
	end
	self:advance()
end

---Restarts the assembler without discarding already existing code, labels or errors.
---@return Program self
function Program:rewind()
	if self.macroMode then
		self:popState()
	else
		self.pos = 1
		self.line, self.char = 1, 1
		self.startl, self.startc = nil, nil
	end self.curChar = charAt(self.source, self.pos) self.memPos = 0x0100
	self.lastMainLabel = nil
	return self
end

---@return boolean
---@private
function Program:atEnd()
	local cond = self.pos > #self.source
	if self.macroMode then
		cond = cond or self.curChar == '}'
	end
	return cond
end

---@private
function Program:setStart()
	self.startl = self.line
	self.startc = self.char
end

---@param num integer
---@param abs boolean?
---@private
function Program:moveMemPos(num, abs)
	self.memPos = (num + (abs and 0 or self.memPos)) & 0xffff
end

---@param l string?
---@param sub boolean
---@private
function Program:addLabel(l, sub)
	if not l then return end

	local label = {
		name = l,
		refersTo = self.memPos,
		timesUsed = 0,
		mainLabel = self.lastMainLabel -- may not need this field?
	}

	local key = l
	if not sub then
		self.lastMainLabel = label
	else
		key = self:resolveLabelName(l)
	end

	self.labels[key] = label
end

---@param id string?
---@return integer?
---@private
function Program:getLabelAddr(id)
	if not id then return end
	local label = self.labels[id]
	if not label then
		self:error("Label '"..id.."' does not exist.")
		return 0
	end
	label.timesUsed = label.timesUsed + 1
	if label.mainLabel then
		label.mainLabel.timesUsed = label.mainLabel.timesUsed + 1
	end
	return label.refersTo
end

---@param id string?
---@return string
---@private
function Program:resolveLabelName(id)
	if not id then return "placeholder" end
	if not self.lastMainLabel then return id end
	return self.lastMainLabel.name .. '/' .. id
end

---@param id string?
---@return boolean
---@private
function Program:labelExists(id)
	if not id then return false end
	if self.labels[id] then return true end
	id = self:resolveLabelName(id)
	if self.labels[id] then return true end
	return false
end

---@param start integer
---@param line integer
---@param char integer
---@private
function Program:addMacro(id, start, line, char, startl, startc)
	self.macros[id] = {
		pos = start,
		line = line, char = char,
		startl = startl, startc = startc,
	}
end

---@private
function Program:storeState()
	table.insert(self.state, {
		pos = self.pos,
		line = self.line, char = self.char,
		startl = self.startl, startc = self.startc,
	})
end

---@private
function Program:restoreState()
	local state = self.state[#self.state]
	self:move(state.pos, state.line, state.char, state.startl, state.startc)
end

function Program:popState()
	local state = table.remove(self.state)
	self:move(state.pos, state.line, state.char, state.startl, state.startc)
end

---@param pos integer
---@param line integer
---@param char integer
---@private
function Program:move(pos, line, char, startl, startc)
	self.pos = pos
	self.line = line
	self.char = char
	self.startl = startl
	self.startc = startc
	self.curChar = charAt(self.source, self.pos)
end

---@param msg string
---@private
function Program:error(msg)
	io.write("Error (", self.startl or self.line, ",", self.startc or self.char, "): ", unescape(msg), ".\n")
	self.hadError = true
	self.startl, self.startc = nil, nil
end

---@param msg string
---@package
function Program:warn(msg)
	-- I'm sure users are more worried about errors than warnings
	if self.hadError then return end
	io.write("Warning (", self.startl or self.line, ",", self.startc or self.char, "): ", unescape(msg), ".\n")
	self.startl, self.startc = nil, nil
end

---@param ... number
---@private
function Program:emitBytes(...)
	if self.memPos < 0x0100 then self:error "Can't write over zeropage" end
	for _, byte in ipairs{...} do
		if byte ~= nil then
			table.insert(self.code, byte & 0xff)
			self:moveMemPos(1)
		end
	end
end

---@private
function Program:skipComment()
	while not self:atEnd() and self.curChar ~= ')' do self:advance() end
	if self:atEnd() then
		self:error "Missing closing parenthesis"
	else
		self:advance()
	end
end

---@param id string?
---@return number?
---@private
function Program:matchOpcode(id)
	if not id then return nil end
	if id == "BRK" then return Opcodes.BRK end
	for opcode,byte in pairs(Opcodes) do
		if id:sub(1,3) == opcode then
			if byte == 0x00 then
				byte = byte | ModeFlags.KEEP
			end

			-- mode detection
			local i = 4
			while charAt(id,i):match "%S" do
				local char = charAt(id,i)
				if char == "2" then
					byte = byte | ModeFlags.SHORT
				elseif char == "k" then
					byte = byte | ModeFlags.KEEP
				elseif char == "r" then
					byte = byte | ModeFlags.RETURN
				else
					-- cancel the whole damn thing
					return nil
				end
				i = i + 1
			end

			return byte
		end
	end
	return nil
end

---@return string?
---@private
function Program:scanIdentifier()
	local id = ""
	while not self:atEnd() and self.curChar:match "%S" do
		id = id .. self:advance()
	end
	if id == "" then return nil end
	return id
end

---@return integer? high, integer? low # high and low byte, only low (in high position) if num <= 0xff
---@private
function Program:scanNumber()
	local snum = ""
	self:setStart()
	while self.curChar:match "[0-9a-f]" do
		snum = snum .. self:advance()
	end
	local num, len = tonumber(snum, 16), #snum
	if len == 0 then error "fatal error at scanNumber" end
	return num & 0xff, (len > 2 and (num >> 8) & 0xff or nil)
end

function Program:skipWhitespace()
	while not self:atEnd() and self.curChar:match "%s" do
		self:advance()
	end
end

---@return number # Time in milliseconds
function Program:assemble()
	local start = os.clock()

	while not self:atEnd() do
		self:skipWhitespace()
		local c = self.curChar
		if c:match "[0-9a-f]" then
			self:emitBytes(self:scanNumber())
		elseif c == "#" then
			self:advance()
			local l, h = self:scanNumber()
			self:emitBytes(Opcodes.LIT | (h and ModeFlags.SHORT or 0))
			if h then self:emitBytes(h) end
			self:emitBytes(l)
		end
	end

	return math.floor((os.clock() - start) * 1000)
end

-- epilogue

local program
do
	local f, err = io.open(arg[1], "rb")
	if not f then
		io.write("Error: Couldn't load file '"..arg[1].."': "..err.."\n")
		os.exit(-1)
	end
	program = Program.new(f:read "a")
	f:close()
end

local totalTime = program:assemble()

if not program.hadError then
	local f, err = io.open(arg[2], "w+b")
	if not f then
		io.write("Error: Couldn't load file '"..arg[2].."' for output: "..err.."\n")
		os.exit(-1)
	end

	local code = program.code
	if #code == 0 then program:warn "Output rom is empty" end
	for _,byte in ipairs(code) do f:write(string.char(byte)) end
	f:close()

	local labelAmt = 0
	for _,_ in pairs(program.labels) do labelAmt = labelAmt + 1 end

	io.write("Assembled '", arg[1], "' in ", totalTime, "ms\n")
	io.write(#code, " bytes (", #code / 652.80, "%", #code >= 0xffff and "!" or "", "), ")
	io.write(labelAmt, " label", labelAmt ~= 1 and "s" or "", ", ")
	io.write("0 macros.\n")
end
